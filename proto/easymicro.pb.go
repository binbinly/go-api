// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/easymicro.proto

package pb_easymicro

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EMReq struct {
	TraceID              string   `protobuf:"bytes,1,opt,name=traceID,proto3" json:"traceID,omitempty"`
	Cmd                  string   `protobuf:"bytes,2,opt,name=cmd,proto3" json:"cmd,omitempty"`
	Seq                  int32    `protobuf:"varint,3,opt,name=seq,proto3" json:"seq,omitempty"`
	ReqData              []byte   `protobuf:"bytes,4,opt,name=reqData,proto3" json:"reqData,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EMReq) Reset()         { *m = EMReq{} }
func (m *EMReq) String() string { return proto.CompactTextString(m) }
func (*EMReq) ProtoMessage()    {}
func (*EMReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8c0bf3d8038adb7, []int{0}
}

func (m *EMReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EMReq.Unmarshal(m, b)
}
func (m *EMReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EMReq.Marshal(b, m, deterministic)
}
func (m *EMReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EMReq.Merge(m, src)
}
func (m *EMReq) XXX_Size() int {
	return xxx_messageInfo_EMReq.Size(m)
}
func (m *EMReq) XXX_DiscardUnknown() {
	xxx_messageInfo_EMReq.DiscardUnknown(m)
}

var xxx_messageInfo_EMReq proto.InternalMessageInfo

func (m *EMReq) GetTraceID() string {
	if m != nil {
		return m.TraceID
	}
	return ""
}

func (m *EMReq) GetCmd() string {
	if m != nil {
		return m.Cmd
	}
	return ""
}

func (m *EMReq) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *EMReq) GetReqData() []byte {
	if m != nil {
		return m.ReqData
	}
	return nil
}

type EMRsp struct {
	TraceID              string   `protobuf:"bytes,1,opt,name=traceID,proto3" json:"traceID,omitempty"`
	Cmd                  string   `protobuf:"bytes,2,opt,name=cmd,proto3" json:"cmd,omitempty"`
	Seq                  int32    `protobuf:"varint,3,opt,name=seq,proto3" json:"seq,omitempty"`
	RspCode              int32    `protobuf:"varint,4,opt,name=rspCode,proto3" json:"rspCode,omitempty"`
	RspMsg               string   `protobuf:"bytes,5,opt,name=rspMsg,proto3" json:"rspMsg,omitempty"`
	RspData              []byte   `protobuf:"bytes,6,opt,name=rspData,proto3" json:"rspData,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EMRsp) Reset()         { *m = EMRsp{} }
func (m *EMRsp) String() string { return proto.CompactTextString(m) }
func (*EMRsp) ProtoMessage()    {}
func (*EMRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8c0bf3d8038adb7, []int{1}
}

func (m *EMRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EMRsp.Unmarshal(m, b)
}
func (m *EMRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EMRsp.Marshal(b, m, deterministic)
}
func (m *EMRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EMRsp.Merge(m, src)
}
func (m *EMRsp) XXX_Size() int {
	return xxx_messageInfo_EMRsp.Size(m)
}
func (m *EMRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_EMRsp.DiscardUnknown(m)
}

var xxx_messageInfo_EMRsp proto.InternalMessageInfo

func (m *EMRsp) GetTraceID() string {
	if m != nil {
		return m.TraceID
	}
	return ""
}

func (m *EMRsp) GetCmd() string {
	if m != nil {
		return m.Cmd
	}
	return ""
}

func (m *EMRsp) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *EMRsp) GetRspCode() int32 {
	if m != nil {
		return m.RspCode
	}
	return 0
}

func (m *EMRsp) GetRspMsg() string {
	if m != nil {
		return m.RspMsg
	}
	return ""
}

func (m *EMRsp) GetRspData() []byte {
	if m != nil {
		return m.RspData
	}
	return nil
}

type EMStreamRsp struct {
	TraceID              string   `protobuf:"bytes,1,opt,name=traceID,proto3" json:"traceID,omitempty"`
	StreamSeq            int32    `protobuf:"varint,2,opt,name=streamSeq,proto3" json:"streamSeq,omitempty"`
	StreamData           []byte   `protobuf:"bytes,3,opt,name=streamData,proto3" json:"streamData,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EMStreamRsp) Reset()         { *m = EMStreamRsp{} }
func (m *EMStreamRsp) String() string { return proto.CompactTextString(m) }
func (*EMStreamRsp) ProtoMessage()    {}
func (*EMStreamRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8c0bf3d8038adb7, []int{2}
}

func (m *EMStreamRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EMStreamRsp.Unmarshal(m, b)
}
func (m *EMStreamRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EMStreamRsp.Marshal(b, m, deterministic)
}
func (m *EMStreamRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EMStreamRsp.Merge(m, src)
}
func (m *EMStreamRsp) XXX_Size() int {
	return xxx_messageInfo_EMStreamRsp.Size(m)
}
func (m *EMStreamRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_EMStreamRsp.DiscardUnknown(m)
}

var xxx_messageInfo_EMStreamRsp proto.InternalMessageInfo

func (m *EMStreamRsp) GetTraceID() string {
	if m != nil {
		return m.TraceID
	}
	return ""
}

func (m *EMStreamRsp) GetStreamSeq() int32 {
	if m != nil {
		return m.StreamSeq
	}
	return 0
}

func (m *EMStreamRsp) GetStreamData() []byte {
	if m != nil {
		return m.StreamData
	}
	return nil
}

type EMGameDataRsp struct {
	TraceID              string   `protobuf:"bytes,1,opt,name=traceID,proto3" json:"traceID,omitempty"`
	StreamSeq            int32    `protobuf:"varint,2,opt,name=streamSeq,proto3" json:"streamSeq,omitempty"`
	ConnIDs              []string `protobuf:"bytes,3,rep,name=connIDs,proto3" json:"connIDs,omitempty"`
	GameItemID           int32    `protobuf:"varint,4,opt,name=gameItemID,proto3" json:"gameItemID,omitempty"`
	GameData             []byte   `protobuf:"bytes,5,opt,name=gameData,proto3" json:"gameData,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EMGameDataRsp) Reset()         { *m = EMGameDataRsp{} }
func (m *EMGameDataRsp) String() string { return proto.CompactTextString(m) }
func (*EMGameDataRsp) ProtoMessage()    {}
func (*EMGameDataRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8c0bf3d8038adb7, []int{3}
}

func (m *EMGameDataRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EMGameDataRsp.Unmarshal(m, b)
}
func (m *EMGameDataRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EMGameDataRsp.Marshal(b, m, deterministic)
}
func (m *EMGameDataRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EMGameDataRsp.Merge(m, src)
}
func (m *EMGameDataRsp) XXX_Size() int {
	return xxx_messageInfo_EMGameDataRsp.Size(m)
}
func (m *EMGameDataRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_EMGameDataRsp.DiscardUnknown(m)
}

var xxx_messageInfo_EMGameDataRsp proto.InternalMessageInfo

func (m *EMGameDataRsp) GetTraceID() string {
	if m != nil {
		return m.TraceID
	}
	return ""
}

func (m *EMGameDataRsp) GetStreamSeq() int32 {
	if m != nil {
		return m.StreamSeq
	}
	return 0
}

func (m *EMGameDataRsp) GetConnIDs() []string {
	if m != nil {
		return m.ConnIDs
	}
	return nil
}

func (m *EMGameDataRsp) GetGameItemID() int32 {
	if m != nil {
		return m.GameItemID
	}
	return 0
}

func (m *EMGameDataRsp) GetGameData() []byte {
	if m != nil {
		return m.GameData
	}
	return nil
}

func init() {
	proto.RegisterType((*EMReq)(nil), "pb.easymicro.EMReq")
	proto.RegisterType((*EMRsp)(nil), "pb.easymicro.EMRsp")
	proto.RegisterType((*EMStreamRsp)(nil), "pb.easymicro.EMStreamRsp")
	proto.RegisterType((*EMGameDataRsp)(nil), "pb.easymicro.EMGameDataRsp")
}

func init() { proto.RegisterFile("proto/easymicro.proto", fileDescriptor_f8c0bf3d8038adb7) }

var fileDescriptor_f8c0bf3d8038adb7 = []byte{
	// 346 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0xc1, 0x4a, 0xf3, 0x40,
	0x14, 0x85, 0x3b, 0x7f, 0xfe, 0xb4, 0xe6, 0x1a, 0xa1, 0x8c, 0x28, 0x63, 0x15, 0x09, 0x59, 0x75,
	0x15, 0x45, 0x17, 0x3e, 0x40, 0x13, 0x25, 0x8b, 0x6c, 0x52, 0x5c, 0xcb, 0x34, 0xbd, 0x94, 0x42,
	0xd3, 0x24, 0x33, 0x41, 0xe8, 0x63, 0xf8, 0x00, 0xbe, 0x94, 0x4f, 0x24, 0x73, 0x9b, 0xd4, 0x50,
	0xa9, 0x1b, 0xdd, 0xcd, 0x77, 0xc8, 0xbd, 0xe7, 0x70, 0x72, 0xe1, 0xac, 0x54, 0x45, 0x5d, 0xdc,
	0xa0, 0xd4, 0x9b, 0x7c, 0x99, 0xa9, 0x22, 0x20, 0xe6, 0x6e, 0x39, 0x0b, 0x76, 0x9a, 0xff, 0x02,
	0x76, 0x94, 0xa4, 0x58, 0x71, 0x01, 0x83, 0x5a, 0xc9, 0x0c, 0xe3, 0x50, 0x30, 0x8f, 0x8d, 0x9d,
	0xb4, 0x45, 0x3e, 0x04, 0x2b, 0xcb, 0xe7, 0xe2, 0x1f, 0xa9, 0xe6, 0x69, 0x14, 0x8d, 0x95, 0xb0,
	0x3c, 0x36, 0xb6, 0x53, 0xf3, 0x34, 0xd3, 0x0a, 0xab, 0x50, 0xd6, 0x52, 0xfc, 0xf7, 0xd8, 0xd8,
	0x4d, 0x5b, 0xf4, 0xdf, 0x18, 0x39, 0xe8, 0xf2, 0x0f, 0x1c, 0x74, 0x39, 0x29, 0xe6, 0x48, 0x0e,
	0x76, 0xda, 0x22, 0x3f, 0x87, 0xbe, 0xd2, 0x65, 0xa2, 0x17, 0xc2, 0xa6, 0x05, 0x0d, 0x35, 0x13,
	0x94, 0xa9, 0xdf, 0x64, 0xda, 0xa2, 0x8f, 0x70, 0x1c, 0x25, 0xd3, 0x5a, 0xa1, 0xcc, 0x7f, 0x0e,
	0x76, 0x05, 0x8e, 0xa6, 0xcf, 0xa6, 0x58, 0x51, 0x3c, 0x3b, 0xfd, 0x12, 0xf8, 0x35, 0xc0, 0x16,
	0xc8, 0xc3, 0x22, 0x8f, 0x8e, 0xe2, 0xbf, 0x33, 0x38, 0x89, 0x92, 0x27, 0x99, 0xa3, 0xc1, 0xdf,
	0x38, 0x09, 0x18, 0x64, 0xc5, 0x7a, 0x1d, 0x87, 0x5a, 0x58, 0x9e, 0x65, 0xe6, 0x1a, 0x34, 0x19,
	0x16, 0x32, 0xc7, 0xb8, 0xc6, 0x3c, 0x0e, 0x9b, 0x66, 0x3a, 0x0a, 0x1f, 0xc1, 0xd1, 0xa2, 0x09,
	0x40, 0xf5, 0xb8, 0xe9, 0x8e, 0xef, 0x3e, 0x18, 0x38, 0x51, 0x32, 0x45, 0xf5, 0xba, 0xcc, 0x90,
	0x3f, 0x80, 0xf3, 0xbc, 0x96, 0x6a, 0x33, 0x91, 0xab, 0x15, 0x3f, 0x0d, 0xba, 0x57, 0x12, 0xd0,
	0x89, 0x8c, 0xbe, 0x8b, 0xba, 0xf4, 0x7b, 0xfc, 0x11, 0x86, 0x66, 0x07, 0xaa, 0x6d, 0xa3, 0x87,
	0xe7, 0x2f, 0xf6, 0xc5, 0xdd, 0x2f, 0xf0, 0x7b, 0xb7, 0x8c, 0x87, 0xe0, 0xb6, 0x5d, 0x1d, 0xde,
	0x71, 0xb9, 0x2f, 0x76, 0xea, 0x35, 0x5b, 0x66, 0x7d, 0xba, 0xf2, 0xfb, 0xcf, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x97, 0x73, 0x74, 0xef, 0xfe, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EMServiceClient is the client API for EMService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EMServiceClient interface {
	// 一元调用
	UnaryCall(ctx context.Context, in *EMReq, opts ...grpc.CallOption) (*EMRsp, error)
	// 服务端流
	ServerStreamCall(ctx context.Context, in *EMReq, opts ...grpc.CallOption) (EMService_ServerStreamCallClient, error)
	// 游戏数据流
	GameDataCall(ctx context.Context, in *EMReq, opts ...grpc.CallOption) (EMService_GameDataCallClient, error)
}

type eMServiceClient struct {
	cc *grpc.ClientConn
}

func NewEMServiceClient(cc *grpc.ClientConn) EMServiceClient {
	return &eMServiceClient{cc}
}

func (c *eMServiceClient) UnaryCall(ctx context.Context, in *EMReq, opts ...grpc.CallOption) (*EMRsp, error) {
	out := new(EMRsp)
	err := c.cc.Invoke(ctx, "/pb.easymicro.EMService/UnaryCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eMServiceClient) ServerStreamCall(ctx context.Context, in *EMReq, opts ...grpc.CallOption) (EMService_ServerStreamCallClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EMService_serviceDesc.Streams[0], "/pb.easymicro.EMService/ServerStreamCall", opts...)
	if err != nil {
		return nil, err
	}
	x := &eMServiceServerStreamCallClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EMService_ServerStreamCallClient interface {
	Recv() (*EMStreamRsp, error)
	grpc.ClientStream
}

type eMServiceServerStreamCallClient struct {
	grpc.ClientStream
}

func (x *eMServiceServerStreamCallClient) Recv() (*EMStreamRsp, error) {
	m := new(EMStreamRsp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eMServiceClient) GameDataCall(ctx context.Context, in *EMReq, opts ...grpc.CallOption) (EMService_GameDataCallClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EMService_serviceDesc.Streams[1], "/pb.easymicro.EMService/GameDataCall", opts...)
	if err != nil {
		return nil, err
	}
	x := &eMServiceGameDataCallClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EMService_GameDataCallClient interface {
	Recv() (*EMGameDataRsp, error)
	grpc.ClientStream
}

type eMServiceGameDataCallClient struct {
	grpc.ClientStream
}

func (x *eMServiceGameDataCallClient) Recv() (*EMGameDataRsp, error) {
	m := new(EMGameDataRsp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EMServiceServer is the server API for EMService service.
type EMServiceServer interface {
	// 一元调用
	UnaryCall(context.Context, *EMReq) (*EMRsp, error)
	// 服务端流
	ServerStreamCall(*EMReq, EMService_ServerStreamCallServer) error
	// 游戏数据流
	GameDataCall(*EMReq, EMService_GameDataCallServer) error
}

// UnimplementedEMServiceServer can be embedded to have forward compatible implementations.
type UnimplementedEMServiceServer struct {
}

func (*UnimplementedEMServiceServer) UnaryCall(ctx context.Context, req *EMReq) (*EMRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryCall not implemented")
}
func (*UnimplementedEMServiceServer) ServerStreamCall(req *EMReq, srv EMService_ServerStreamCallServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStreamCall not implemented")
}
func (*UnimplementedEMServiceServer) GameDataCall(req *EMReq, srv EMService_GameDataCallServer) error {
	return status.Errorf(codes.Unimplemented, "method GameDataCall not implemented")
}

func RegisterEMServiceServer(s *grpc.Server, srv EMServiceServer) {
	s.RegisterService(&_EMService_serviceDesc, srv)
}

func _EMService_UnaryCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EMReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EMServiceServer).UnaryCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.easymicro.EMService/UnaryCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EMServiceServer).UnaryCall(ctx, req.(*EMReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EMService_ServerStreamCall_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EMReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EMServiceServer).ServerStreamCall(m, &eMServiceServerStreamCallServer{stream})
}

type EMService_ServerStreamCallServer interface {
	Send(*EMStreamRsp) error
	grpc.ServerStream
}

type eMServiceServerStreamCallServer struct {
	grpc.ServerStream
}

func (x *eMServiceServerStreamCallServer) Send(m *EMStreamRsp) error {
	return x.ServerStream.SendMsg(m)
}

func _EMService_GameDataCall_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EMReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EMServiceServer).GameDataCall(m, &eMServiceGameDataCallServer{stream})
}

type EMService_GameDataCallServer interface {
	Send(*EMGameDataRsp) error
	grpc.ServerStream
}

type eMServiceGameDataCallServer struct {
	grpc.ServerStream
}

func (x *eMServiceGameDataCallServer) Send(m *EMGameDataRsp) error {
	return x.ServerStream.SendMsg(m)
}

var _EMService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.easymicro.EMService",
	HandlerType: (*EMServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnaryCall",
			Handler:    _EMService_UnaryCall_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStreamCall",
			Handler:       _EMService_ServerStreamCall_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GameDataCall",
			Handler:       _EMService_GameDataCall_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/easymicro.proto",
}
